/*
Alldebrid API

Welcome to the Alldebrid API! You can use this API to access various Alldebrid services from custom applications or scripts.

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the V4HostsGet200ResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V4HostsGet200ResponseData{}

// V4HostsGet200ResponseData struct for V4HostsGet200ResponseData
type V4HostsGet200ResponseData struct {
	Hosts       *map[string]V4HostsGet200ResponseDataHostsValue       `json:"hosts,omitempty"`
	Streams     *map[string]V4HostsGet200ResponseDataStreamsValue     `json:"streams,omitempty"`
	Redirectors *map[string]V4HostsGet200ResponseDataRedirectorsValue `json:"redirectors,omitempty"`
}

// NewV4HostsGet200ResponseData instantiates a new V4HostsGet200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV4HostsGet200ResponseData() *V4HostsGet200ResponseData {
	this := V4HostsGet200ResponseData{}
	return &this
}

// NewV4HostsGet200ResponseDataWithDefaults instantiates a new V4HostsGet200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV4HostsGet200ResponseDataWithDefaults() *V4HostsGet200ResponseData {
	this := V4HostsGet200ResponseData{}
	return &this
}

// GetHosts returns the Hosts field value if set, zero value otherwise.
func (o *V4HostsGet200ResponseData) GetHosts() map[string]V4HostsGet200ResponseDataHostsValue {
	if o == nil || IsNil(o.Hosts) {
		var ret map[string]V4HostsGet200ResponseDataHostsValue
		return ret
	}
	return *o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V4HostsGet200ResponseData) GetHostsOk() (*map[string]V4HostsGet200ResponseDataHostsValue, bool) {
	if o == nil || IsNil(o.Hosts) {
		return nil, false
	}
	return o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *V4HostsGet200ResponseData) HasHosts() bool {
	if o != nil && !IsNil(o.Hosts) {
		return true
	}

	return false
}

// SetHosts gets a reference to the given map[string]V4HostsGet200ResponseDataHostsValue and assigns it to the Hosts field.
func (o *V4HostsGet200ResponseData) SetHosts(v map[string]V4HostsGet200ResponseDataHostsValue) {
	o.Hosts = &v
}

// GetStreams returns the Streams field value if set, zero value otherwise.
func (o *V4HostsGet200ResponseData) GetStreams() map[string]V4HostsGet200ResponseDataStreamsValue {
	if o == nil || IsNil(o.Streams) {
		var ret map[string]V4HostsGet200ResponseDataStreamsValue
		return ret
	}
	return *o.Streams
}

// GetStreamsOk returns a tuple with the Streams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V4HostsGet200ResponseData) GetStreamsOk() (*map[string]V4HostsGet200ResponseDataStreamsValue, bool) {
	if o == nil || IsNil(o.Streams) {
		return nil, false
	}
	return o.Streams, true
}

// HasStreams returns a boolean if a field has been set.
func (o *V4HostsGet200ResponseData) HasStreams() bool {
	if o != nil && !IsNil(o.Streams) {
		return true
	}

	return false
}

// SetStreams gets a reference to the given map[string]V4HostsGet200ResponseDataStreamsValue and assigns it to the Streams field.
func (o *V4HostsGet200ResponseData) SetStreams(v map[string]V4HostsGet200ResponseDataStreamsValue) {
	o.Streams = &v
}

// GetRedirectors returns the Redirectors field value if set, zero value otherwise.
func (o *V4HostsGet200ResponseData) GetRedirectors() map[string]V4HostsGet200ResponseDataRedirectorsValue {
	if o == nil || IsNil(o.Redirectors) {
		var ret map[string]V4HostsGet200ResponseDataRedirectorsValue
		return ret
	}
	return *o.Redirectors
}

// GetRedirectorsOk returns a tuple with the Redirectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V4HostsGet200ResponseData) GetRedirectorsOk() (*map[string]V4HostsGet200ResponseDataRedirectorsValue, bool) {
	if o == nil || IsNil(o.Redirectors) {
		return nil, false
	}
	return o.Redirectors, true
}

// HasRedirectors returns a boolean if a field has been set.
func (o *V4HostsGet200ResponseData) HasRedirectors() bool {
	if o != nil && !IsNil(o.Redirectors) {
		return true
	}

	return false
}

// SetRedirectors gets a reference to the given map[string]V4HostsGet200ResponseDataRedirectorsValue and assigns it to the Redirectors field.
func (o *V4HostsGet200ResponseData) SetRedirectors(v map[string]V4HostsGet200ResponseDataRedirectorsValue) {
	o.Redirectors = &v
}

func (o V4HostsGet200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V4HostsGet200ResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hosts) {
		toSerialize["hosts"] = o.Hosts
	}
	if !IsNil(o.Streams) {
		toSerialize["streams"] = o.Streams
	}
	if !IsNil(o.Redirectors) {
		toSerialize["redirectors"] = o.Redirectors
	}
	return toSerialize, nil
}

type NullableV4HostsGet200ResponseData struct {
	value *V4HostsGet200ResponseData
	isSet bool
}

func (v NullableV4HostsGet200ResponseData) Get() *V4HostsGet200ResponseData {
	return v.value
}

func (v *NullableV4HostsGet200ResponseData) Set(val *V4HostsGet200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableV4HostsGet200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableV4HostsGet200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV4HostsGet200ResponseData(val *V4HostsGet200ResponseData) *NullableV4HostsGet200ResponseData {
	return &NullableV4HostsGet200ResponseData{value: val, isSet: true}
}

func (v NullableV4HostsGet200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV4HostsGet200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
